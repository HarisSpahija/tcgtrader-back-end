type Query {
  users(query: String): [User!]!
  cards(query: String): [Card!]!
  offerLists: [OfferList]
  wantLists: [WantList]
  me: User!
}

type Mutation {
  createUser(data: CreateUserInput): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  updateCard(id: ID!, data: UpdateCardInput!): Card!
  createCard(data: CardInput): Card!
  addCardsToWantList(data: cardWantListInput): WantList!
  removeCardsFromWantList(data: cardWantListInput): WantList!
}

type Subscription {
  offerList(userId: ID!): OfferList!
  wantList(userId: ID!): OfferList!
  card(cardId: ID!): Card!
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
}

input CardInput {
  name: String!
  type: String!
  cardText: String!
  flavourText: String
  convertedManaCost: Int
  standardLegal: Boolean!
  price: Float!
}

input UpdateCardInput {
  name: String
  type: String
  cardText: String
  flavourText: String
  convertedManaCost: Int
  standardLegal: Boolean
  price: Float
}

input cardWantListInput {
  userId: ID!
  cards: [ID]!
}

type Card {
  id: ID!
  name: String!
  type: String!
  cardText: String!
  flavourText: String
  convertedManaCost: Int
  standardLegal: Boolean!
  price: Float!
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  offerList: OfferList
  wantList: WantList
}

type OfferList {
  id: ID!
  owner: User!
  cards: [Card!]!
  possibleTraders: [User]
}

type WantList {
  id: ID!
  owner: User!
  cards: [Card!]!
  possibleTraders: [User]
}
